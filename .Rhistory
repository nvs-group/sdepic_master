}
if (second_spot() == "school") {
output$second_choice1 <- school_temp1
output$second_choice2 <- school_temp2
output$second_choice3 <- school_temp3
}
if (second_spot() == "occupation") {
output$second_choice1 <- occ_temp1
output$second_choice2 <- occ_temp2
output$second_choice3 <- occ_temp3
}
if (second_spot() == "degree") {
output$second_choice1 <- degree_temp1
output$second_choice2 <- degree_temp2
output$second_choice3 <- degree_temp3
}
if (second_spot() == "curriculum") {
output$second_choice1 <- curr_temp1
output$second_choice2 <- curr_temp2
output$second_choice3 <- curr_temp3
}
if (third_spot() == "school") {
output$third_choice1 <- school_temp1
output$third_choice2 <- school_temp2
output$third_choice3 <- school_temp3
}
if (third_spot() == "occupation") {
output$third_choice1 <- occ_temp1
output$third_choice2 <- occ_temp2
output$third_choice3 <- occ_temp3
}
if (third_spot() == "degree") {
output$third_choice1 <- degree_temp1
output$third_choice2 <- degree_temp2
output$third_choice3 <- degree_temp3
}
if (third_spot() == "curriculum") {
output$third_choice1 <- curr_temp1
output$third_choice2 <- curr_temp2
output$third_choice3 <- curr_temp3
}
if (fourth_spot() == "school") {
output$fourth_choice1 <- school_temp1
output$fourth_choice2 <- school_temp2
output$fourth_choice3 <- school_temp3
}
if (fourth_spot() == "occupation") {
output$fourth_choice1 <- occ_temp1
output$fourth_choice2 <- occ_temp2
output$fourth_choice3 <- occ_temp3
}
if (fourth_spot() == "degree") {
output$fourth_choice1 <- degree_temp1
output$fourth_choice2 <- degree_temp2
output$fourth_choice3 <- degree_temp3
}
if (fourth_spot() == "curriculum") {
output$fourth_choice1 <- curr_temp1
output$fourth_choice2 <- curr_temp2
output$fourth_choice3 <- curr_temp3
}
})
school_table <- reactive({
school_t1 <- school
if(!is.null(input$school_text)){
school_t1 <- filter(school_t1 , grepl(input$school_text, school_t1$INSTNM, ignore.case = TRUE))
}
})
observeEvent(input$school_text,{
if(!is.null(input$school_text)){
school_filter <<- school %>% filter(school$INSTNM %in% school_table()$INSTNM)
school_filter <<- school_filter %>% select(INSTNM)
updateSelectInput(session, inputId = "school_first", label = NULL,
choices = isolate(sort(school_filter[,1])))
}
})
degree_table <- reactive({
degree_t1 <- aw_degree
if(!is.null(input$degree_text)){
degree_t1 <- filter(degree_t1 , grepl(input$degree_text, degree_t1$Degree_Name, ignore.case = TRUE))
}
})
observeEvent(input$degree_text, {
#  req(input$degree_text)
if(!is.null(input$degree_text)){
degree_filter <<- aw_degree %>% filter(aw_degree$Degree_Name %in% degree_table()$Degree_Name)
degree_filter <<- select(degree_filter, Degree_Name)
updateSelectInput(session, inputId = "degree_first", label = NULL,
choices = isolate(degree_filter))
}
})
curriculum_table <- reactive({
curriculum_t1 <- cips
if(!is.null(input$curriculum_text)){
curriculum_t1 <- filter(curriculum_t1 , grepl(input$curriculum_text, curriculum_t1$CIPNAME, ignore.case = TRUE))
}
})
observeEvent(input$curriculum_text,{
if(!is.null(input$curriculum_text)){
curriculum_filter <<- cips %>% filter(cips$CIPNAME %in% curriculum_table()$CIPNAME)
curriculum_filter <<- curriculum_filter %>% select(CIPNAME)
updateSelectInput(session, inputId = "curriculum_first", label = NULL,
choices = isolate(sort(curriculum_filter[,1])))
}
})
occupation_table <- reactive({
occupation_t1 <- alt_title
if(!is.null(input$occupation_text)){
occupation_t1 <- filter(occupation_t1 , grepl(input$occupation_text, occupation_t1$AltName, ignore.case = TRUE))
}
})
observeEvent(input$occupation_text,{
if(!is.null(input$occupation_text)){
occupation_filter <<- occupation %>% filter(occupation$OCCCODE %in% occupation_table()$OCCCODE)
updateSelectInput(session, inputId = "occupation_first", label = NULL,
choices = sort(unique(occupation_filter$OCCNAME)))
}
})
table_var <- reactive ({
backbone_temp <- backbone
if(!is.null(input$occupation_last) & input$occupation_last !='') {
occupation_temp <- filter(occupation, OCCNAME %in% input$occupation_last) %>% select(OCCCODE)
backbone_temp <- filter(backbone_temp, OCCCODE %in% occupation_temp)
}
if(!is.null(input$school_last) & input$school_last !='') {
school_temp <- filter(school, INSTNM %in% input$school_last) %>% select(UNITID)
backbone_temp <- filter(backbone_temp, UNITID %in% school_temp)
}
if(!is.null(input$curriculum_last) & input$curriculum_last !='') {
curriculum_temp <- filter(cips, CIPNAME %in% input$curriculum_last) %>% select(CIPCODE)
backbone_temp <- filter(backbone_temp, CIPCODE %in% curriculum_temp)
}
if(!is.null(input$degree_last) & input$degree_last !='') {
degree_temp <- filter(aw_degree, Degree_Name %in% input$degree_last) %>% select(AWLEVEL)
backbone_temp <- filter(backbone_temp, AWLEVEL %in% degree_temp)
}
filtered_table <- left_join(backbone_temp, school, by = "UNITID")
filtered_table <- left_join(filtered_table, cips, by = "CIPCODE")
filtered_table <- left_join(filtered_table, aw_degree, by = "AWLEVEL")
filtered_table <- left_join(filtered_table, ent_degree, by = "Entry_Code")
filtered_table <- left_join(filtered_table, occupation, by = "OCCCODE")
filtered_table <- filtered_table %>% select("INSTNM", "CIPNAME", "Degree_Name", "OCCNAME",
"Entry_Degree", "MedWage")
school_filter <<- unique(filtered_table$INSTNM)
degree_filter <<- unique(filtered_table$Degree_Name)
occupation_filter <<- unique(filtered_table$OCCNAME)
curriculum_filter <<- unique(filtered_table$CIPNAME)
if(identical(school_list, character(0))){
updateSelectInput(session, inputId = "school_last", label = "School",
choices = isolate(c(All = '', sort(school_filter))), selected = '')
}
if(identical(occupation_list, character(0))){
updateSelectInput(session, inputId = "occupation_last", label = "Occupation",
choices = isolate(c(All = '', sort(occupation_filter))), selected = '')
}
if(identical(curriculum_list, character(0))){
updateSelectInput(session, inputId = "curriculum_last", label = "Curriculum",
choices = isolate(c(All = '', sort(curriculum_filter))), selected = '')
}
if(identical(degree_list, character(0))){
updateSelectInput(session, inputId = "degree_last", label = "Degree",
choices = isolate(c(All = '', sort(degree_filter))), selected = '')
}
filtered_table <- filtered_table %>% rename("Institution<br>Name" = "INSTNM",
"Curriculum<br>Name" = "CIPNAME", "Degree<br>Name" = "Degree_Name",
"Occupation<br>Name" = "OCCNAME", "Median<br>Wage" = "MedWage",
"Entry_Level<br>Degree" = "Entry_Degree")
})
observeEvent(input$make_table,{
output$table <- renderDataTable({
DT::datatable(
data = table_var(),
escape = FALSE,
options = list(
filter = FALSE,
pageLength = 5,
autoWidth = TRUE,
lengthMenu = c(5, 8, 10)
),
selection = list(mode = 'single')
) %>%
formatStyle(
0,
target = 'row',
color = 'black',
backgroundColor = 'grey',
fontWeight = 'bold',
lineHeight = '100%'
)
})
})
observeEvent(input$next_welcome, {
updateTabsetPanel(session, "tabs",selected = "page1")
})
observeEvent(input$next_page1, {
updateTabsetPanel(session, "tabs",selected = "page2")
})
observeEvent(input$previous_page1, {
updateTabsetPanel(session, "tabs",selected = "welcome")
})
observeEvent(input$next_page2, {
updateTabsetPanel(session, "tabs",selected = "page3")
})
observeEvent(input$previous_page2, {
updateTabsetPanel(session, "tabs",selected = "page1")
})
observeEvent(input$next_page3, {
updateTabsetPanel(session, "tabs",selected = "page4")
})
observeEvent(input$previous_page3, {
updateTabsetPanel(session, "tabs",selected = "page2")
})
observeEvent(input$next_page4, {
updateTabsetPanel(session, "tabs",selected = "page5")
})
observeEvent(input$previous_page4, {
updateTabsetPanel(session, "tabs",selected = "page3")
})
observeEvent(input$previous_page5, {
updateTabsetPanel(session, "tabs",selected = "page4")
})
observeEvent(input$school_add, {
if (!is.null(input$school_first)) {
school_list <<- rbind(school_list, input$school_first)
school_list <<- unique(school_list)
updateSelectInput(session,
inputId = "school_middle",
label = "",
choices = isolate(c(None = '', school_list))
)
updateSelectInput(session,
inputId = "school_last",
label = "School",
choices = c(All = '', school_list),
selected = '')
}
})
observeEvent(input$school_delete, {
if(!is.null(input$school_middle)) {
school_list <<- school_list[!school_list %in% input$school_middle]
updateSelectInput(session,
inputId = "school_middle",
label = "",
choices = isolate(c(None = '', school_list)))
updateSelectInput(session,
inputId = "school_last",
label = "School",
choices = isolate(c(All = '', school_list)),
selected = '')
}
})
observeEvent(input$degree_add, {
if (!is.null(input$degree_first)) {
degree_list <<- rbind(degree_list, input$degree_first)
degree_list <<- unique(degree_list)
updateSelectInput(session,
inputId = "degree_middle",
label = "",
choices = isolate(c(None = '', degree_list)))
updateSelectInput(session,
inputId = "degree_last",
label = "Degree",
choices = c(All = '', degree_list),
selected = '')
}
})
observeEvent(input$degree_delete, {
if(!is.null(input$degree_middle)) {
degree_list <<- degree_list[!degree_list %in% input$degree_middle]
updateSelectInput(session,
inputId = "degree_middle",
label = "",
choices = isolate(c(None = '', degree_list)))
updateSelectInput(session,
inputId = "degree_last",
label = "Degree",
choices = isolate(c(All = '', degree_list)),
selected = '')
}
})
observeEvent(input$degree_last,{
req(input$degree_last)
if(identical(degree_list, character(0))){
degree_list <<- rbind(degree_list, input$degree_last)
updateSelectInput(session,
inputId = "degree_last",
label = "Degree",
choices = c(All = '', degree_list),
selected = degree_list[,1])
updateSelectInput(session,
inputId = "degree_middle",
label = "",
choices = isolate(c(None = '', degree_list))
)
}
})
observeEvent(input$occupation_last,{
req(input$occupation_last)
if(identical(occupation_list, character(0))){
occupation_list <<- rbind(occupation_list, input$occupation_last)
updateSelectInput(session,
inputId = "occupation_last",
label = "Occupation",
choices = c(All = '', occupation_list),
selected = occupation_list[,1])
updateSelectInput(session,
inputId = "occupation_middle",
label = "",
choices = isolate(c(None = '', occupation_list)))
}
})
observeEvent(input$school_last,{
req(input$school_last)
if(identical(school_list, character(0))){
school_list <<- rbind(school_list, input$school_last)
updateSelectInput(session,
inputId = "school_last",
label = "School",
choices = c(All = '', school_list),
selected = school_list[,1])
updateSelectInput(session,
inputId = "school_middle",
label = "",
choices = isolate(c(None = '', school_list)))
}
})
observeEvent(input$curriculum_last,{
req(input$curriculum_last)
if(identical(curriculum_list, character(0))){
curriculum_list <<- rbind(curriculum_list, input$curriculum_last)
updateSelectInput(session,
inputId = "curriculum_last",
label = "Curriculum",
choices = c(All = '', curriculum_list),
selected = curriculum_list[,1])
updateSelectInput(session,
inputId = "curriculum_middle",
label = "",
choices = isolate(c(None = '', curriculum_list)))
}
})
observeEvent(input$occupation_add, {
if (!is.null(input$occupation_first)) {
occupation_list <<- rbind(occupation_list, input$occupation_first)
occupation_list <<- unique(occupation_list)
updateSelectInput(session,
inputId = "occupation_middle",
label = "",
choices = isolate(c(None = '', occupation_list)))
updateSelectInput(session,
inputId = "occupation_last",
label = "Occupation",
choices = c(All = '', occupation_list),
selected = '')
}
})
observeEvent(input$occupation_delete, {
if(!is.null(input$occupation_middle)) {
occupation_list <<- occupation_list[!occupation_list %in% input$occupation_middle]
updateSelectInput(session,
inputId = "occupation_middle",
label = "",
choices = isolate(c(None = '', occupation_list)))
updateSelectInput(session,
inputId = "occupation_last",
label = "Occupation",
choices = isolate(c(All = '', occupation_list)),
selected = '')
}
})
observeEvent(input$curriculum_add, {
if (!is.null(input$curriculum_first)) {
curriculum_list <<- rbind(curriculum_list, input$curriculum_first)
curriculum_list <<- unique(curriculum_list)
updateSelectInput(session,
inputId = "curriculum_middle",
label = "",
choices = isolate(c(None = '', curriculum_list)))
updateSelectInput(session,
inputId = "curriculum_last",
label = "Curriculum",
choices = c(All = '', curriculum_list),
selected = '')
}
})
observeEvent(input$curriculum_delete, {
if(!is.null(input$curriculum_middle)) {
curriculum_list <<- curriculum_list[!curriculum_list %in% input$curriculum_middle]
updateSelectInput(session,
inputId = "curriculum_middle",
label = "",
choices = isolate(c(None = '', curriculum_list)))
updateSelectInput(session,
inputId = "curriculum_last",
label = "Curriculum",
choices = isolate(c(All = '', curriculum_list)),
selected = '')
}
})
}
shinyApp(ui, server)
runApp()
View(school_filter)
View(occupation_filter)
View(curriculum_filter)
runApp()
runApp()
runApp()
runApp()
runApp()
?accordian
## app.R ##
##Self Directed EPIC-Fork 2/17/2020
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(shinyWidgets)
library(markdown)
library(tidyverse)
library(DT)
library(tools)
library(shinyjs)
library(sodium)
library(shinyalert)
library(RSQLite)
library(RODBC)
library(shinyjqui)
library(shinymanager)
library(gmailr)
library(shinyBS)
?accordion
?boxPlus
box
?box
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("stringi")
install.packages("shinydashboardPlus")
install.packages("shinydashboardPlus")
shiny::runApp()
devtools::install_github("RinteRface/shinydashboardPlus")
runApp()
runApp()
?accordion
runApp()
runApp()
?accordionItem
## app.R ##
##Self Directed EPIC-Fork 2/17/2020
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(shinyWidgets)
library(markdown)
library(tidyverse)
library(DT)
library(tools)
library(shinyjs)
library(sodium)
library(shinyalert)
library(RSQLite)
library(RODBC)
library(shinyjqui)
library(shinymanager)
library(gmailr)
library(shinyBS)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(ent_degree)
runApp()
runApp()
runApp()
runApp()
?renderDataTable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
