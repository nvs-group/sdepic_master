)
updateSliderInput(
session,
inputId = "annual_ed_cost",
label = "Desired Tuition Level",
value = max(sort(unique(school$TOTALCOST))),
min = min(sort(unique(school$TOTALCOST))),
step = 1000,
max = max(sort(unique(school$TOTALCOST)))
)
})
school_table <- reactive({
school_t1 <- school
if(!is.null(input$school_text)){
school_t1 <- filter(school_t1 , grepl(input$school_text, school_t1$INSTNM, ignore.case = TRUE))
}
})
observeEvent(input$school_text,{
if(!is.null(input$school_text)){
school_filter <<- school %>% filter(school$INSTNM %in% school_table()$INSTNM)
school_filter <<- school_filter %>% select(INSTNM)
updateSelectInput(session, inputId = "school_first", label = NULL,
choices = isolate(sort(school_filter[,1])))
}
})
degree_table <- reactive({
degree_t1 <- aw_degree
if(!is.null(input$degree_text)){
degree_t1 <- filter(degree_t1 , grepl(input$degree_text, degree_t1$Degree_Name, ignore.case = TRUE))
}
})
observeEvent(input$degree_text, {
#  req(input$degree_text)
if(!is.null(input$degree_text)){
degree_filter <<- aw_degree %>% filter(aw_degree$Degree_Name %in% degree_table()$Degree_Name)
degree_filter <<- degree_filter$Degree_Name
updateSelectInput(session, inputId = "degree_first", label = NULL,
choices = isolate(degree_filter))
}
})
curriculum_table <- reactive({
curriculum_t1 <- cips
if(!is.null(input$curriculum_text)){
curriculum_t1 <- filter(curriculum_t1 , grepl(input$curriculum_text, curriculum_t1$CIPNAME, ignore.case = TRUE))
}
})
observeEvent(input$curriculum_text,{
if(!is.null(input$curriculum_text)){
curriculum_filter <<- cips %>% filter(cips$CIPNAME %in% curriculum_table()$CIPNAME)
curriculum_filter <<- curriculum_filter %>% select(CIPNAME)
updateSelectInput(session, inputId = "curriculum_first", label = NULL,
choices = isolate(sort(curriculum_filter[,1])))
}
})
occupation_table <- reactive({
occupation_t1 <- alt_title
if(!is.null(input$occupation_text)){
occupation_t1 <- filter(occupation_t1 , grepl(input$occupation_text, occupation_t1$AltName, ignore.case = TRUE))
}
})
observeEvent(input$occupation_text,{
if(!is.null(input$occupation_text)){
occupation_filter <<- occupation %>% filter(occupation$OCCCODE %in% occupation_table()$OCCCODE)
updateSelectInput(session, inputId = "occupation_first", label = NULL,
choices = sort(unique(occupation_filter$OCCNAME)))
}
})
table_var <- reactive ({
backbone_temp <- backbone
print(input$required_degree)
if(!is.null(input$required_degree) & input$required_degree !='') {
required_temp1 <- filter(ent_degree, Entry_Degree %in% input$required_degree) %>% select(Entry_Code)
backbone_temp <- filter(backbone_temp, Entry_Code %in% required_temp1[,1])
}
if( input$state_filter !='') {
state_temp1 <- filter(school, State %in% input$state_filter) %>% select(UNITID)
backbone_temp <- filter(backbone_temp, UNITID %in% state_temp1[,1])
}
if(!is.null(input$occupation_filtered) & input$occupation_filtered !='') {
occupation_temp <- filter(occupation, OCCNAME %in% input$occupation_filtered) %>% select(OCCCODE)
backbone_temp <- filter(backbone_temp, OCCCODE %in% occupation_temp)
}
if(!is.null(input$school_filtered) & input$school_filtered !='') {
school_temp <- filter(school, INSTNM %in% input$school_filtered) %>% select(UNITID)
backbone_temp <- filter(backbone_temp, UNITID %in% school_temp)
}
if(!is.null(input$curriculum_filtered) & input$curriculum_filtered !='') {
curriculum_temp <- filter(cips, CIPNAME %in% input$curriculum_filtered) %>% select(CIPCODE)
backbone_temp <- filter(backbone_temp, CIPCODE %in% curriculum_temp)
}
if(!is.null(input$degree_filtered) & input$degree_filtered !='') {
degree_temp <- filter(aw_degree, Degree_Name %in% input$degree_filtered) %>% select(AWLEVEL)
backbone_temp <- filter(backbone_temp, AWLEVEL %in% degree_temp)
}
#    if(input$min_start_salary > 0){
#      start_salary_temp <- filter(occupation, X17p >= input$min_start_salary ) %>% select(OCCCODE)
#      backbone_temp <- filter(backbone_temp, OCCCODE %in% (start_salary_temp[[1]]))
#    }
#    if(input$annual_ed_cost >= 0){
#      annual_ed_temp <- filter(school, TOTALCOST <= input$annual_ed_cost ) %>% select(UNITID)
#      backbone_temp <- filter(backbone_temp, UNITID %in% annual_ed_temp[,1])
#    }
filtered_table <- left_join(backbone_temp, school, by = "UNITID")
filtered_table <- left_join(filtered_table, cips, by = "CIPCODE")
filtered_table <- left_join(filtered_table, aw_degree, by = "AWLEVEL")
filtered_table <- left_join(filtered_table, ent_degree, by = "Entry_Code")
filtered_table <- left_join(filtered_table, occupation, by = "OCCCODE")
filtered_table <- filtered_table %>% select("UNITID", "INSTNM", "STABBR","CIPNAME", "Degree_Name", "OCCNAME",
"Entry_Degree", "X17p", "TOTALCOST")
school_filter <<- unique(filtered_table$INSTNM)
degree_filter <<- unique(filtered_table$Degree_Name)
occupation_filter <<- unique(filtered_table$OCCNAME)
curriculum_filter <<- unique(filtered_table$CIPNAME)
if(identical(school_list_filter, character(0))){
updateSelectInput(session, inputId = "school_filtered", label = "",
choices = isolate(c(All = '', sort(school_filter))), selected = '')
}
if(identical(occupation_list_filter, character(0))){
updateSelectInput(session, inputId = "occupation_filtered", label = "",
choices = isolate(c(All = '', sort(occupation_filter))), selected = '')
}
if(identical(curriculum_list_filter, character(0))){
updateSelectInput(session, inputId = "curriculum_filtered", label = "",
choices = isolate(c(All = '', sort(curriculum_filter))), selected = '')
}
if(identical(degree_list_filter, character(0))){
updateSelectInput(session, inputId = "degree_filtered", label = "",
choices = isolate(c(All = '', sort(degree_filter))), selected = '')
}
filtered_table <- filtered_table %>% rename("Institution<br>Name" = "INSTNM", "State<br>Abbrv" = "STABBR",
"Curriculum<br>Name" = "CIPNAME", "Degree<br>Name" = "Degree_Name",
"Occupation<br>Name" = "OCCNAME", "Start<br>Wage" = "X17p",
"Entry_Level<br>Degree" = "Entry_Degree")
})
observeEvent(input$create_table, {
output$table <- renderDataTable({
DT::datatable(
data = table_var(),
extensions = 'Buttons',
escape = FALSE,
options = list(
saveState = TRUE,
filter = FALSE,
autoWidth = TRUE,
lengthMenu = c(12, 24, 36),
dom = 'Blfrtip',
buttons = list(# "copy",
list(
extend = "collection",
text = 'Select',
action = DT::JS(
"function ( e, dt, node, config ) {
Shiny.setInputValue('select', true, {priority: 'event'});
}"
)
))
),
selection = list(mode = 'single')
) %>%
formatStyle(
0,
target = 'row',
color = 'black',
backgroundColor = 'grey',
fontWeight = 'bold',
lineHeight = '100%'
)
})
})
observeEvent(input$select, {
print("hello")
})
observeEvent(input$next_welcome, {
updateTabsetPanel(session, "tabs",selected = "page1")
})
observeEvent(input$next_page1, {
updateTabsetPanel(session, "tabs",selected = "page2")
})
observeEvent(input$previous_page1, {
updateTabsetPanel(session, "tabs",selected = "welcome")
})
observeEvent(input$next_page2, {
updateTabsetPanel(session, "tabs",selected = "page3")
})
observeEvent(input$previous_page2, {
updateTabsetPanel(session, "tabs",selected = "page1")
})
observeEvent(input$next_page3, {
updateTabsetPanel(session, "tabs",selected = "page4")
})
observeEvent(input$previous_page3, {
updateTabsetPanel(session, "tabs",selected = "page2")
})
observeEvent(input$next_page4, {
updateTabsetPanel(session, "tabs",selected = "page5")
})
observeEvent(input$previous_page4, {
updateTabsetPanel(session, "tabs",selected = "page3")
})
observeEvent(input$previous_page5, {
updateTabsetPanel(session, "tabs",selected = "page4")
})
observeEvent(input$school_add, {
if (!is.null(input$school_first)) {
school_list <<- rbind(school_list, input$school_first)
school_list <<- unique(school_list)
updateSelectInput(session,
inputId = "school_middle",
label = "",
choices = isolate(c(None = '', school_list))
)
updateSelectInput(session,
inputId = "school_last",
label = "School",
choices = isolate(c(None = '', school_list)),
selected = '')
}
})
observeEvent(input$school_delete, {
if(!is.null(input$school_last)) {
school_list <<- school_list[!school_list %in% input$school_last]
updateSelectInput(session,
inputId = "school_middle",
label = "",
choices = isolate(c(None = '', school_list)))
updateSelectInput(session,
inputId = "school_last",
label = "",
choices = isolate(c(None = '', school_list)),
selected = '')
}
})
observeEvent(input$degree_add, {
if (!is.null(input$degree_first)) {
degree_list <<- rbind(degree_list, input$degree_first)
degree_list <<- unique(degree_list)
updateSelectInput(session,
inputId = "degree_middle",
label = "",
choices = isolate(c(None = '', degree_list)))
updateSelectInput(session,
inputId = "degree_last",
label = "",
choices = isolate(c(None = '', degree_list)),
selected = '')
}
})
observeEvent(input$degree_delete, {
if(!is.null(input$degree_last)) {
degree_list <<- degree_list[!degree_list %in% input$degree_last]
updateSelectInput(session,
inputId = "degree_middle",
label = "",
choices = isolate(c(None = '', degree_list)))
updateSelectInput(session,
inputId = "degree_last",
label = "",
choices = isolate(c(None = '', degree_list)),
selected = '')
}
})
observeEvent(input$degree_filtered,{
req(input$degree_filtered)
if(identical(degree_list_filter, character(0))){
degree_list <<- rbind(degree_list, input$degree_filtered)
degree_list <<- unique(degree_list)
degree_list_filter <<- rbind(degree_list_filter, input$degree_filtered)
updateSelectInput(session,
inputId = "degree_filtered",
label = "",
choices = c(All = '', degree_list_filter),
selected = degree_list_filter[,1])
updateSelectInput(session,
inputId = "degree_middle",
label = "",
choices = isolate(c(None = '', degree_list))
)
updateSelectInput(session,
inputId = "degree_last",
label = "",
choices = isolate(c(None = '', degree_list))
)
}
})
observe({
if(input$degree_filtered == ""){
degree_list_filter <<- character(0)
}
})
observeEvent(input$degree_last, {
req(input$degree_last)
degree_list_filter <<- character(0)
degree_list_filter <<- rbind(degree_list_filter, input$degree_last)
updateSelectInput(session,
inputId = "degree_filtered",
label = "",
choices = c(All = '', degree_list_filter),
selected = degree_list_filter[,1])
})
observeEvent(input$occupation_filtered,{
req(input$occupation_filtered)
if(identical(occupation_list_filter, character(0))){
occupation_list <<- rbind(occupation_list, input$occupation_filtered)
occupation_list <<- unique(occupation_list)
occupation_list_filter <<- rbind(occupation_list_filter, input$occupation_filtered)
updateSelectInput(session,
inputId = "occupation_filtered",
label = "",
choices = c(All = '', occupation_list_filter),
selected = occupation_list_filter[,1])
updateSelectInput(session,
inputId = "occupation_middle",
label = "",
choices = isolate(c(None = '', occupation_list)))
updateSelectInput(session,
inputId = "occupation_last",
label = "",
choices = isolate(c(None = '', occupation_list)))
}
})
observe({
if(input$occupation_filtered == ""){
occupation_list_filter <<- character(0)
}
})
observeEvent(input$occupation_last, {
req(input$occupation_last)
occupation_list_filter <<- character(0)
occupation_list_filter <<- rbind(occupation_list_filter, input$occupation_last)
updateSelectInput(session,
inputId = "occupation_filtered",
label = "",
choices = c(All = '', occupation_list_filter),
selected = occupation_list_filter[,1])
})
observeEvent(input$school_filtered,{
req(input$school_filtered)
if(identical(school_list_filter, character(0))){
school_list <<- rbind(school_list, input$school_filtered)
school_list <<- unique(school_list)
school_list_filter <<- rbind(school_list_filter, input$school_filtered)
updateSelectInput(session,
inputId = "school_filtered",
label = "",
choices = c(All = '', school_list_filter),
selected = school_list_filter[,1])
updateSelectInput(session,
inputId = "school_middle",
label = "",
choices = isolate(c(None = '', school_list)))
updateSelectInput(session,
inputId = "school_last",
label = "",
choices = isolate(c(None = '', school_list)))
}
})
observe({
if(input$school_filtered == ''){
school_list_filter <<- character(0)
}
})
observeEvent(input$school_last, {
req(input$school_last)
school_list_filter <<- character(0)
school_list_filter <<- rbind(school_list_filter, input$school_last)
updateSelectInput(session,
inputId = "school_filtered",
label = "",
choices = c(All = '', school_list_filter),
selected = school_list_filter[,1])
})
observeEvent(input$curriculum_filtered,{
req(input$curriculum_filtered)
if(identical(curriculum_list_filter, character(0))){
curriculum_list <<- rbind(curriculum_list, input$curriculum_filtered)
curriculum_list <<- unique(curriculum_list)
curriculum_list_filter <<- rbind(curriculum_list_filter, input$curriculum_filtered)
updateSelectInput(session,
inputId = "curriculum_filtered",
label = "",
choices = c(All = '', curriculum_list_filter),
selected = curriculum_list_filter[,1])
updateSelectInput(session,
inputId = "curriculum_middle",
label = "",
choices = isolate(c(None = '', curriculum_list)))
updateSelectInput(session,
inputId = "curriculum_last",
label = "",
choices = isolate(c(None = '', curriculum_list)))
}
})
observe({
if(input$curriculum_filtered == ''){
curriculum_list_filter <<- character(0)
}
})
observeEvent(input$curriculum_last, {
req(input$curriculum_last)
curriculum_list_filter <<- character(0)
curriculum_list_filter <<- rbind(curriculum_list_filter, input$curriculum_last)
updateSelectInput(session,
inputId = "curriculum_filtered",
label = "",
choices = c(All = '', curriculum_list_filter),
selected = curriculum_list_filter[,1])
})
observeEvent(input$occupation_add, {
if (!is.null(input$occupation_first)) {
occupation_list <<- rbind(occupation_list, input$occupation_first)
occupation_list <<- unique(occupation_list)
updateSelectInput(session,
inputId = "occupation_middle",
label = "",
choices = isolate(c(None = '', occupation_list)))
updateSelectInput(session,
inputId = "occupation_last",
label = "",
choices = isolate(c(None = '', occupation_list)),
selected = '')
}
})
observeEvent(input$occupation_delete, {
if(!is.null(input$occupation_last)) {
occupation_list <<- occupation_list[!occupation_list %in% input$occupation_last]
updateSelectInput(session,
inputId = "occupation_middle",
label = "",
choices = isolate(c(None = '', occupation_list)))
updateSelectInput(session,
inputId = "occupation_last",
label = "",
choices = isolate(c(None = '', occupation_list)),
selected = '')
}
})
observeEvent(input$curriculum_add, {
if (!is.null(input$curriculum_first)) {
curriculum_list <<- rbind(curriculum_list, input$curriculum_first)
curriculum_list <<- unique(curriculum_list)
updateSelectInput(session,
inputId = "curriculum_middle",
label = "",
choices = isolate(c(None = '', curriculum_list)))
updateSelectInput(session,
inputId = "curriculum_last",
label = "",
choices = isolate(c(None = '', curriculum_list)),
selected = '')
}
})
observeEvent(input$curriculum_delete, {
if(!is.null(input$curriculum_last)) {
curriculum_list <<- curriculum_list[!curriculum_list %in% input$curriculum_last]
updateSelectInput(session,
inputId = "curriculum_middle",
label = "",
choices = isolate(c(None = '', curriculum_list)))
updateSelectInput(session,
inputId = "curriculum_last",
label = "",
choices = isolate(c(None = '', curriculum_list)),
selected = '')
}
})
}
shinyApp(ui, server)
runApp()
state_abbr <- readRDS("state_abbr.rds")
cips <- readRDS("CIPS.rds")
alt_title <- readRDS("AltTitle.rds")
backbone <- readRDS("Backbone.rds")
school <- readRDS("Schools.rds")
occupation <- readRDS("Occupations.rds")
ent_degree <- readRDS("Ent_Degree.rds")
aw_degree <- readRDS("AW_Degree.rds")
runApp()
runApp()
View(school)
runApp()
runApp()
?updateSelectInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
.libPaths()
## app.R ##
##Self Directed EPIC-Fork 2/17/2020
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(shinyWidgets)
library(markdown)
library(tidyverse)
library(DT)
library(tools)
library(shinyjs)
library(sodium)
#library(shinyalert)
#library(RSQLite)
#library(RODBC)
library(shinyjqui)
library(shinymanager)
#library(gmailr)
library(shinyBS)
#library(dplyr)
install.packages("shiny")
install.packages("DT")
